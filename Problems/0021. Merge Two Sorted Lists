/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        
        if(list1 == null) {
            return list2;
        } else if (list2 == null) {
            return list1;
        } else if(list1 == null && list2 == null)
            return null;
        
        ListNode head = null;
        ListNode link1 = null;
        ListNode link2 = null;
        ListNode main = null;
        if(list1.val <= list2.val) {
            link1 = list1;
            link2 = list2;
        } else {
            link1 = list2;
            link2 = list1;
        }

        while(link1 != null) {
            if(link1.val > link2.val) {
                main.next = link2;
                main = main.next;
                link2 = link2.next;
                if(link2 == null) {
                    main.next = link1;
                    main = main.next;
                    break;
                }
            } else {
                if(main == null) {
                    main = link1;
                    head = main;
                } else {
                    main.next = link1;
                    main = main.next;
                }
                link1 = link1.next;
            }
        }

        if(link2 != null) {
            main.next = link2;
        }

        return head;
    }
}
